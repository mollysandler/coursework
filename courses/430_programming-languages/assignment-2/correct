[opening tests.sml]

--------- Part1 ---------
 **** either (fn x => x > 0, fn x => x > 20) 10;
val it = true : bool
 **** either (fn x => x mod 2 = 1, fn x => x < 20) 100;
val it = false : bool
 **** either (fn x => x > #"a", fn x => x < #"z") #"1";
val it = true : bool

--------- Part2 ---------
 **** satisfiesSome ([], 10);
val it = false : bool
 **** satisfiesSome ([fn x => x > 0, fn x => x < 20], 10);
val it = true : bool
 **** satisfiesSome ([fn x => x > 0, fn x => x < 20], 100);
val it = true : bool
 **** satisfiesSome ([fn x => x < 0, fn x => x > 20, fn x => x mod 2 = 0], 10);
val it = true : bool
 **** satisfiesSome ([fn x => x mod 2 = 0], 11);
val it = false : bool
 **** satisfiesSome ([fn x => x >= #"a", fn x => x <= #"z", fn x => x <> #"m"], #"1");
val it = true : bool
 **** satisfiesSome ([fn x => x >= #"a", fn x => x <= #"z", fn x => x <> #"m"], #"m");
val it = true : bool

--------- Part3 ---------
 **** mapSome (fn x => if x > 0 then SOME x else NONE) [1, 2, ~3, 4, ~55];
val it = [1,2,4] : int list
 **** mapSome (fn x => if x > 0 then SOME (Int.toString x) else NONE) [1, 2, ~3, 4, ~55];
val it = ["1","2","4"] : string list

--------- Part4 ---------
 **** notIn (1, []);
val it = true : bool
 **** notIn (2, [1,2,3]);
val it = false : bool
 **** notIn (4, [1,2,3]);
val it = true : bool
 **** notIn ("hi", ["hello","hola","ciao","howdy"]);
val it = true : bool
 **** notIn ("hello", ["hello","hola","ciao"]);
val it = false : bool

--------- Part5 ---------
 **** getByKey ("b", [("a", 9), ("b", 7), ("c", 12)], ~1);;
val it = 7 : int
 **** getByKey ("c", [("a", 9), ("b", 7), ("c", 12)], ~1);;
val it = 12 : int
 **** getByKey ("x", [("a", 9), ("b", 7), ("c", 12)], ~1);;
val it = ~1 : int
 **** getByKey (1, [(3, 9), (4, 7), (1, 12)], ~1);;
val it = 12 : int
 **** getByKey (3, [(3, true), (4, true), (1, false)], false);;
val it = true : bool

--------- Part6 ---------
 **** lengthList EmptyList;
val it = 0 : int
 **** lengthList (ListNode (9, ListNode (3, ListNode (2, EmptyList))));
val it = 3 : int
 **** lengthList (ListNode (9, ListNode (2, EmptyList)));
val it = 2 : int

--------- Part7 ---------
 **** filterList (fn x => x > 0) EmptyList;
val it = EmptyList : int List
 **** filterList (fn x => x mod 2 = 1) (ListNode (9, ListNode (3, ListNode (2, EmptyList))));
val it = ListNode (9,ListNode (3,EmptyList)) : int List
 **** filterList (fn x => x > 3) (ListNode (9, ListNode (3, ListNode (2, EmptyList))));
val it = ListNode (9,EmptyList) : int List
 **** filterList (fn x => x > 0 andalso x < 10) (ListNode (9, ListNode (2, ListNode (~3, EmptyList))));
val it = ListNode (9,ListNode (2,EmptyList)) : int List

--------- Part8 ---------
val TreeExmp1 =
  VerboseNode
    {left=Righty {right=Leaf {value=2},value=9},
     right=Lefty {left=Leaf {value=10},value=6},value=4} : int VerboseTree
val TreeExmp2 =
  VerboseNode
    {left=VerboseNode
            {left=Leaf {value=12},
             right=VerboseNode
                     {left=EmptyVerboseTree,right=EmptyVerboseTree,value=2},
             value=9},
     right=VerboseNode
             {left=VerboseNode
                     {left=EmptyVerboseTree,right=Leaf {value=100},value=20},
              right=Lefty
                      {left=Lefty
                              {left=VerboseNode
                                      {left=Leaf {value=29},
                                       right=Leaf {value=39},value=10},
                               value=19},value=9},value=6},value=4}
  : int VerboseTree
val TreeExmp3 =
  VerboseNode
    {left=Righty {right=Leaf {value="the"},value="are"},
     right=Lefty {left=Leaf {value="values"},value="tree's"},value="these"}
  : string VerboseTree
 **** sumTree EmptyVerboseTree;
val it = 0 : int
 **** sumTree (Leaf {value=4});
val it = 4 : int
 **** sumTree (VerboseNode {value=4, left=EmptyVerboseTree, right=EmptyVerboseTree});
val it = 4 : int
 **** sumTree TreeExmp1;
val it = 31 : int
 **** sumTree TreeExmp2;
val it = 259 : int

--------- Part9 ---------
 **** gatherTree EmptyVerboseTree;
val it = [] : ?.X1 list
 **** gatherTree (Leaf {value=4});
val it = [4] : int list
 **** gatherTree (VerboseNode {value=4, left=EmptyVerboseTree, right=EmptyVerboseTree});
val it = [4] : int list
 **** gatherTree TreeExmp1;
val it = [4,9,2,6,10] : int list
 **** gatherTree TreeExmp2;
val it = [4,9,12,2,6,20,100,9,19,10,29,39] : int list
 **** gatherTree TreeExmp3;
val it = ["these","are","the","tree's","values"] : string list

--------- Part10 ---------
 **** simplifyTree EmptyVerboseTree;
val it = EmptyBinaryTree : ?.X1 BinaryTree
 **** simplifyTree (Leaf {value=4});
val it = BinaryNode {left=EmptyBinaryTree,right=EmptyBinaryTree,value=4}
  : int BinaryTree
 **** simplifyTree (VerboseNode {value=4, left=EmptyVerboseTree, right=EmptyVerboseTree});
val it = BinaryNode {left=EmptyBinaryTree,right=EmptyBinaryTree,value=4}
  : int BinaryTree
 **** simplifyTree TreeExmp1;
val it =
  BinaryNode
    {left=BinaryNode
            {left=EmptyBinaryTree,
             right=BinaryNode
                     {left=EmptyBinaryTree,right=EmptyBinaryTree,value=2},
             value=9},
     right=BinaryNode
             {left=BinaryNode
                     {left=EmptyBinaryTree,right=EmptyBinaryTree,value=10},
              right=EmptyBinaryTree,value=6},value=4} : int BinaryTree
 **** simplifyTree TreeExmp2;
val it =
  BinaryNode
    {left=BinaryNode
            {left=BinaryNode
                    {left=EmptyBinaryTree,right=EmptyBinaryTree,value=12},
             right=BinaryNode
                     {left=EmptyBinaryTree,right=EmptyBinaryTree,value=2},
             value=9},
     right=BinaryNode
             {left=BinaryNode
                     {left=EmptyBinaryTree,
                      right=BinaryNode
                              {left=EmptyBinaryTree,right=EmptyBinaryTree,
                               value=100},value=20},
              right=BinaryNode
                      {left=BinaryNode
                              {left=BinaryNode
                                      {left=BinaryNode
                                              {left=EmptyBinaryTree,
                                               right=EmptyBinaryTree,value=29},
                                       right=BinaryNode
                                               {left=EmptyBinaryTree,
                                                right=EmptyBinaryTree,
                                                value=39},value=10},
                               right=EmptyBinaryTree,value=19},
                       right=EmptyBinaryTree,value=9},value=6},value=4}
  : int BinaryTree
 **** simplifyTree TreeExmp3;
val it =
  BinaryNode
    {left=BinaryNode
            {left=EmptyBinaryTree,
             right=BinaryNode
                     {left=EmptyBinaryTree,right=EmptyBinaryTree,value="the"},
             value="are"},
     right=BinaryNode
             {left=BinaryNode
                     {left=EmptyBinaryTree,right=EmptyBinaryTree,
                      value="values"},right=EmptyBinaryTree,value="tree's"},
     value="these"} : string BinaryTree
